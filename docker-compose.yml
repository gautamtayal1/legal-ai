services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost/api}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-inquire_user}:${POSTGRES_PASSWORD:-inquire_pass}@postgres:5432/${POSTGRES_DB:-inquire_db}
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8080
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_HOST=elasticsearch
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - CLERK_WEBHOOK_SIGNING_SECRET=${CLERK_WEBHOOK_SIGNING_SECRET}
    depends_on:
      - postgres
      - elasticsearch
      - chromadb
    volumes:
      - ./uploads:/app/uploads
    networks:
      - app-network
    restart: unless-stopped
    command: >
      sh -c "
        sleep 10 &&
        alembic upgrade head &&
        uvicorn main:app --host 0.0.0.0 --port 8000
      "

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-inquire_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-inquire_pass}
      POSTGRES_DB: ${POSTGRES_DB:-inquire_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-8.16.1}
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms1g -Xmx1g}"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network

  chromadb:
    image: chromadb/chroma:${CHROMADB_VERSION:-latest}
    environment:
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8080
      - PERSIST_DIRECTORY=/chroma/chroma
      - CHROMA_SERVER_HTTP_PORT=8080 
    ports:
      - "8080:8080"
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - app-network
    command: ["run", "--host", "0.0.0.0", "--port", "8080"]

  adminer:
    image: adminer
    restart: always
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data:
  chromadb_data:
